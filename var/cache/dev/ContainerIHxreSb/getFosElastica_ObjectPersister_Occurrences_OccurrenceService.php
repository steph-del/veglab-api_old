<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'fos_elastica.object_persister.occurrences.occurrence' shared service.

include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/elastica-bundle/src/Persister/ObjectPersisterInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/elastica-bundle/src/Persister/ObjectPersister.php';
include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/elastica-bundle/src/Transformer/ModelToElasticaTransformerInterface.php';
include_once \dirname(__DIR__, 4).'/src/Elastica/Transformer/OccurrenceToElasticaTransformer.php';

return $this->services['fos_elastica.object_persister.occurrences.occurrence'] = new \FOS\ElasticaBundle\Persister\ObjectPersister(($this->services['fos_elastica.index.occurrences.occurrence'] ?? $this->getFosElastica_Index_Occurrences_OccurrenceService()), new \App\Elastica\Transformer\OccurrenceToElasticaTransformer(), 'App\\Entity\\Occurrence', ['id_keyword' => ['type' => 'keyword'], 'geometry' => ['type' => 'geo_shape'], 'centroid' => ['type' => 'geo_point'], 'userId' => ['type' => 'long'], 'projectId' => ['type' => 'long'], 'userEmail' => [], 'userPseudo' => [], 'observer' => [], 'observerInstitution' => [], 'level' => [], 'layer' => [], 'parentId' => [], 'validations' => ['type' => 'nested', 'properties' => ['id' => ['type' => 'long'], 'validatedBy' => ['type' => 'long'], 'validatedAt' => ['type' => 'date', 'format' => 'yyyy-MM-dd HH:mm:ss'], 'updatedBy' => ['type' => 'long'], 'updatedAt' => ['type' => 'date', 'format' => 'yyyy-MM-dd HH:mm:ss'], 'repository' => ['type' => 'text'], 'repositoryIdNomen' => ['type' => 'long'], 'repositoryIdTaxo' => ['type' => 'text'], 'inputName' => ['type' => 'text'], 'validatedName' => ['type' => 'text'], 'validName' => ['type' => 'text'], 'isDiagnosis' => ['type' => 'boolean']]], 'extendedFieldOccurrences' => [], 'flatVlObservers' => [], 'vlObservers' => ['type' => 'nested', 'properties' => ['id' => ['type' => 'long'], 'name' => ['type' => 'text']]], 'coef' => ['type' => 'text'], 'dateObserved' => ['type' => 'date', 'format' => 'yyyy-MM-dd HH:mm:ss'], 'dateObserved_keyword' => ['type' => 'keyword'], 'dateObservedYear' => ['type' => 'long'], 'dateObservedMonth' => ['type' => 'long'], 'dateObservedDay' => ['type' => 'long'], 'dateCreated' => ['type' => 'date', 'format' => 'yyyy-MM-dd HH:mm:ss'], 'dateCreated_keyword' => ['type' => 'keyword'], 'dateUpdated' => ['type' => 'date', 'format' => 'yyyy-MM-dd HH:mm:ss'], 'datePublished' => ['type' => 'date', 'format' => 'yyyy-MM-dd HH:mm:ss'], 'userSciName' => ['type' => 'text'], 'userSciName_keyword' => ['type' => 'keyword', 'normalizer' => 'occ_normalizer'], 'userSciNameId' => ['type' => 'long'], 'acceptedSciName' => [], 'acceptedSciNameId' => ['type' => 'long'], 'family' => ['type' => 'text'], 'family_keyword' => ['type' => 'keyword'], 'plantnetId' => ['type' => 'long'], 'taxoRepo' => ['type' => 'text'], 'certainty' => ['type' => 'text'], 'certainty_keyword' => ['type' => 'keyword'], 'occurrenceType' => [], 'isWild' => ['type' => 'boolean'], 'phenology' => [], 'sampleHerbarium' => ['type' => 'boolean'], 'bibliographySource' => [], 'inputSource' => [], 'isPublic' => ['type' => 'boolean'], 'isPublic_keyword' => ['type' => 'keyword'], 'isVisibleInCel' => ['type' => 'boolean'], 'isVisibleInVegLab' => ['type' => 'boolean'], 'signature' => [], 'elevation' => ['type' => 'integer'], 'elevation_keyword' => ['type' => 'keyword'], 'geodatum' => [], 'locality' => ['type' => 'text'], 'locality_keyword' => ['type' => 'keyword', 'normalizer' => 'occ_normalizer'], 'localityInseeCode' => ['type' => 'text'], 'sublocality' => [], 'environment' => [], 'localityConsistency' => [], 'station' => [], 'publishedLocation' => [], 'locationAccuracy' => [], 'osmCounty' => [], 'osmState' => [], 'osmPostcode' => [], 'osmCountry' => [], 'osmCountryCode' => [], 'osmId' => [], 'osmPlaceId' => [], 'identiplanteScore' => ['type' => 'long'], 'identiplanteScore_keyword' => ['type' => 'keyword'], 'isIdentiplanteValidated' => ['type' => 'boolean'], 'tags' => []], []);
